#include <stdio.h>
#include <stdlib.h>

unsigned char sgn[10][8][8] = {
	{
		{ 0, 0, 0, 0, 8, 8, 8, 8 },
		{ 0, 0, 0, 0, 8, 0, 0, 0 },
		{ 0, 0, 0, 0, 8, 0, 0, 0 },
		{ 0, 0, 0, 0, 8, 0, 0, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0 }
	}, // 0
	{
		{ 0, 0, 0, 0, 8, 8, 8, 8 },
		{ 0, 0, 0, 0, 8, 0, 0, 0 },
		{ 0, 0, 0, 0, 8, 0, 0, 0 },
		{ 0, 0, 0, 0, 8, 0, 0, 0 },
		{ 0, 0, 0, 0, 8, 0, 0, 0 },
		{ 0, 0, 0, 0, 8, 0, 0, 0 },
		{ 0, 0, 0, 0, 8, 0, 0, 0 },
		{ 0, 0, 0, 0, 8, 0, 0, 0 }
	}, // 1
	{
		{ 0, 0, 0, 0, 8, 8, 8, 8 },
		{ 0, 0, 0, 0, 8, 0, 0, 0 },
		{ 0, 0, 0, 0, 8, 0, 0, 0 },
		{ 0, 0, 0, 0, 8, 0, 0, 0 },
		{ 0, 0, 0, 0, 8, 0, 0, 0 },
		{ 0, 0, 0, 0, 8, 0, 0, 0 },
		{ 0, 0, 0, 0, 8, 0, 0, 0 },
		{ 0, 0, 0, 0, 8, 8, 8, 8 }
	}, // 2
	{
		{ 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 0, 0, 8, 0, 0, 0 },
		{ 0, 0, 0, 0, 8, 0, 0, 0 },
		{ 0, 0, 0, 0, 8, 0, 0, 0 },
		{ 0, 0, 0, 0, 8, 8, 8, 8 }
	}, // 3
	{
		{ 8, 8, 8, 8, 0, 0, 0, 0 },
		{ 0, 0, 0, 8, 0, 0, 0, 0 },
		{ 0, 0, 0, 8, 0, 0, 0, 0 },
		{ 0, 0, 0, 8, 0, 0, 0, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0 }
	}, // 4
	{
		{ 8, 8, 8, 8, 0, 0, 0, 0 },
		{ 0, 0, 0, 8, 0, 0, 0, 0 },
		{ 0, 0, 0, 8, 0, 0, 0, 0 },
		{ 0, 0, 0, 8, 0, 0, 0, 0 },
		{ 0, 0, 0, 8, 0, 0, 0, 0 },
		{ 0, 0, 0, 8, 0, 0, 0, 0 },
		{ 0, 0, 0, 8, 0, 0, 0, 0 },
		{ 0, 0, 0, 8, 0, 0, 0, 0 }
	}, // 5
	{
		{ 8, 8, 8, 8, 0, 0, 0, 0 },
		{ 0, 0, 0, 8, 0, 0, 0, 0 },
		{ 0, 0, 0, 8, 0, 0, 0, 0 },
		{ 0, 0, 0, 8, 0, 0, 0, 0 },
		{ 0, 0, 0, 8, 0, 0, 0, 0 },
		{ 0, 0, 0, 8, 0, 0, 0, 0 },
		{ 0, 0, 0, 8, 0, 0, 0, 0 },
		{ 8, 8, 8, 8, 0, 0, 0, 0 }
	}, // 6
	{
		{ 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 0, 8, 0, 0, 0, 0 },
		{ 0, 0, 0, 8, 0, 0, 0, 0 },
		{ 0, 0, 0, 8, 0, 0, 0, 0 },
		{ 8, 8, 8, 8, 0, 0, 0, 0 }
	}, // 7
	{
		{ 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 8, 0, 0, 8, 0, 0 },
		{ 0, 0, 8, 0, 0, 8, 0, 0 },
		{ 0, 0, 8, 0, 0, 8, 0, 0 },
		{ 0, 0, 8, 8, 8, 8, 0, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0 }
	}, // 8
	{
		{ 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 8, 8, 8, 8, 0, 0 },
		{ 0, 0, 8, 0, 0, 8, 0, 0 },
		{ 0, 0, 8, 0, 0, 8, 0, 0 },
		{ 0, 0, 8, 0, 0, 8, 0, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0 }
	} // 9
};

void clear_map(unsigned char map[16][64]) {
	for (int i = 0; i < 16; i++) {
		for (int j = 0; j < 64; j++) {
			map[i][j] = 0;
		}
	}
}

void draw_sgn(unsigned char map[16][64], int row, int col, int digit) {
	for (int i = 0; i < 8; i++)
		for (int j = 0; j < 8; j++)
			map[row + i][col + j] = sgn[digit][i][j];
}

void draw_map(unsigned char map[16][64], int randNum) {
	int cur = 0, div = 1000;
	for (int div = 1000; div > 0; div /= 10) {
		int digit = (randNum / div) % 10;
		int row = rand() % 9, col = rand() % 9;
		draw_sgn(map, cur + row, col, digit);
		cur += row + 8;
	}
}


extern int decode(unsigned char map[16][64]);

int main() {

	unsigned char map[16][64];
	int PERFORMANCE = 0;

	srand(3);

	for (int tc = 0; tc < 2000; tc++) {
		int randNum = rand() % 10000;
		clear_map(map);
		draw_map(map, randNum);
		int res = decode(map);
		if (res == randNum) {
			PERFORMANCE++;
		}
	}

	return 0;
}